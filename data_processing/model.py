import trueskill

DEFAULT_MU = 25

DEFAULT_SIGMA = 25.0 / 3.0


class TrueskillRating(object):
    def __init__(self, trueskill_rating=None):
        if trueskill_rating:
            self.trueskill_rating = trueskill_rating
        else:
            self.trueskill_rating = trueskill.Rating(mu=DEFAULT_MU, sigma=DEFAULT_SIGMA)

    def __str__(self):
        return "(%.3f, %.3f)" % (self.trueskill_rating.mu, self.trueskill_rating.sigma)

    def __eq__(self, other):
        return isinstance(other, self.__class__) and \
               self.trueskill_rating == other.trueskill_rating

    def __ne__(self, other):
        return not self == other

    def get_effective_rating(self):
        return self.trueskill_rating.mu - 3 * self.trueskill_rating.sigma

    def get_json_dict(self):
        json_dict = {'mu': self.trueskill_rating.mu,
                     'sigma': self.trueskill_rating.sigma,
                     'effective_rating': self.get_effective_rating()}

        return json_dict

    @classmethod
    def from_json(cls, json_dict):
        if json_dict is None:
            return None

        return cls(trueskill.Rating(mu=json_dict['mu'], sigma=json_dict['sigma']))


class Tournament(object):
    def __init__(self, date, name, players, matches, region, id=None):
        '''
        :param date: datetime
        :param name: string
        :param players: list of player ids
        :param matches:  list of MatchResults
        :param region: string
        :param id: ObjectID, autogenerated by mongo during insert
        '''
        self.id = id
        self.date = date
        self.name = name
        self.matches = matches
        self.region = region
        self.players = players

    def get_json_dict(self):
        json_dict = {}

        if self.id:
            json_dict['_id'] = self.id

        json_dict['type'] = self.type
        json_dict['raw'] = self.raw
        json_dict['date'] = self.date
        json_dict['name'] = self.name
        json_dict['players'] = self.players
        json_dict['matches'] = [m.get_json_dict() for m in self.matches]
        json_dict['region'] = self.region

        return json_dict

    @classmethod
    def from_json(cls, json_dict):
        if json_dict is None:
            return None

        return cls(json_dict['date'],
                   json_dict['name'],
                   json_dict['players'],
                   [MatchResult.from_json(m) for m in json_dict['matches']],
                   json_dict['region'],
                   id=json_dict['_id'] if '_id' in json_dict else None)


class MatchResult(object):
    def __init__(self, winner=None, loser=None):
        '''
        :param winner: string
        :param loser: string
        '''
        self.winner = winner
        self.loser = loser

    def __str__(self):
        return "%s > %s" % (self.winner, self.loser)

    def __eq__(self, other):
        return isinstance(other, self.__class__) and \
               self.winner == other.winner and \
               self.loser == other.loser

    def __ne__(self, other):
        return not self == other

    def contains_players(self, player1, player2):
        return (self.winner == player1 and self.loser == player2) or \
               (self.winner == player2 and self.loser == player1)

    def contains_player(self, player_id):
        return self.winner == player_id or self.loser == player_id

    def did_player_win(self, player_id):
        return self.winner == player_id

    def get_opposing_player_id(self, player_id):
        if self.winner == player_id:
            return self.loser
        elif self.loser == player_id:
            return self.winner
        else:
            return None

    def get_json_dict(self):
        json_dict = {}

        json_dict['winner'] = self.winner
        json_dict['loser'] = self.loser

        return json_dict

    @classmethod
    def from_json(cls, json_dict):
        if json_dict is None:
            return None

        return cls(winner=json_dict['winner'], loser=json_dict['loser'])


class Player(object):
    def __init__(self, name, rating, region, id=None):
        '''
        :param name: string
        :param rating:  dict[string] -> rating, where rating is a dict[string] -> float
        :param region: string
        :param id: ObjectId, autogenerated when you insert into mongo
        '''
        self.id = id
        self.name = name
        self.rating = rating
        self.region = region

    def __str__(self):
        return "%s %s %s %s" % (
            self.id,
            self.name,
            self.rating,
            self.region)

    def __eq__(self, other):
        return isinstance(other, self.__class__) and \
               self.id == other.id and \
               self.name == other.name and \
               self.rating == other.rating and \
               self.region == other.region

    def __ne__(self, other):
        return not self == other

    def get_json_dict(self):
        json_dict = {}

        if self.id:
            json_dict['_id'] = self.id

        json_dict['name'] = self.name
        json_dict['rating'] = self.rating
        json_dict['region'] = self.region

        return json_dict

    @classmethod
    def from_json(cls, json_dict):
        if json_dict is None:
            return None

        return cls(
            json_dict['name'],
            json_dict['rating'],
            json_dict['region'],
            id=json_dict['_id'] if '_id' in json_dict else None)
